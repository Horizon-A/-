第一部分
1.汇编语言由汇编指令、伪指令和其他符号组成
2.cpu对储存器的读写，必须和芯片进行信息交互，交互信息包括：
  储存单元的地址（地址信息）
  器件的选择，读或写的命令（控制信息）
  读或写的数据（数据信息）
3.电子计算机传输的信息都是电信号，需要用导线来传送，这些cpu与其他芯片连接的导线通常称为总线，总线又被分为：
  地址总线--cpu可以对进行寻址的存储单元为2^n
  控制总线--cpu一次的传输的数据量（n/8 字节）；一根数据总线一次可以传输一个二进制位
  数据总线--总线的宽度决定了cpu对外部器件的控制能力；一根控制总线代表着一种控制（例如，“读信号输出”控制总线负责由cpu向外传送信号）
4.RAM随机存储器，可读可写，带电存储，掉电数据丢失
5.ROM只读存储器，只可读，不带电存储，掉电数据不丢失
6.cpu由运算器、控制器、寄存器等器件构成，各自功能如下：
  运算器进行信息处理
  寄存器进行信息存储
  控制器控制各种器件进行工作
  内部总线连接各种器件，在他们之间进行数据的传送
7.寄存器分为(不同cpu的寄存器个数和结构是不相同的，下面的均已8086cpu为例)：
  通用寄存器：用来存放一般性的数据，AX、BX、CX、DX
    AX可分为AH和AL
    BX可分为BH和BL
    CX可分为CH和CL
    DX可分为DH和DL
  段寄存器：存储内存单元的段地址，CS、DS、SS、ES
    CS为代码段寄存器（存储段地址）
    IP为指令指针寄存器（存储偏移地址）
  在任意时刻，CPU将CS：IP指向的内容当做指令执行
8.汇编指令举例：
  mov ax,18	将18送入寄存器ax
  mov ah,78	将78送入寄存器ah
  add ax,8	将寄存器ax中的数值加上8
  mov ax,bx	将寄存器bx中的数据送入寄存器ax
  add ax,bx	将ax和bx中的数值相加，结果存在ax中
注意：指令中两个操作对象（寄存器）的位数应当是一致的，不一致会导致错误
9.程序员能够用指令读写的部件只有寄存器，所以他们可以通过改变寄存器中的内容实现对cpu的控制

第二部分
1.debug程序
  定义：debug是dos、Windows都提供的实模式（8086方式）程序的调试工具
  功能：可以用它查看cpu各种寄存器中的内容、内存情况和在机器码级跟踪程序的运行
  打开方式：win+R -> 输入command -> 输入debug
  命令：
  r                          查看cpu中所有寄存器的值
  r [寄存器]                 改变该寄存器的值
  d                          查看预设地址处的内容
  d [段地址：偏移地址]       查看该指定地址处的内容（输出从指定地址开始的128个内存单元的内容，以十六进制的格式进行输出）   
  d 1000:0 f                 [命令实例]查看从1000：0~1000：f单元的内容
  e 1000:0 0 1 2 3 4 5       [命令实例]将从1000：0开始的6个单元中的内容分别写为0、1、2、3、4、5
  e 1000:10(+enter)          [命令实例]以提问的方式来逐个修改从1000:10开始的内存单元中的内容‘.’号前为当前内存单元的原始值，若需修改直接键入新值，若不修改键入空格，修改结束，Enter退出
  u 1000:0                   [命令实例]查看从1000:0开始的内存单元中的机器指令和它们对应的汇编指令
  ps：u命令的显示输出分为3部分，每一条机器指令的地址、机器指令、机器指令所对应的汇编指令
  t			     执行CS:IP指向的指令（若要执行指定内存单元所在的指令，须先利用r指令修改cs和ip中的值，再用t指令执行）
  a			     从预设地址开始以汇编指令的方式输入指令
  a 1000:0                   从1000：0开始以汇编指令的方式输入指令
2.所有的物理存储器被看做一个由若干个存储单元组成的逻辑存储器，每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间；cpu在这段地址空间中读写数据，实际上就是在相对应得物理存储器中读写数据；其中，内存地址空间被分为3个部分：
  主随机存储器的地址空间     可以读写数据，掉电丢失
  显存地址空间               写入的数据会被显卡输出到显示器上
  ROM地址空间                写入操作是无效的，因为这是只读存储器

第三部分
1.cpu中，用16位寄存器来存储一个字，高8位存放高位字节，低8位存放地位字节。
2.内存中存储时，内存单元是字节单元（一个单元存放一个字节），则一个字要用两个地址连续的内存单元来存放，字的低位字节要要在低位地址，高位字节要放在高位地址。
3.子单元：存放一个字型整数（16位）的内存单元，由两个地址连续的内存单元组成。
4.寄存器
  ds   段寄存器，通常用来存放要访问数据的段地址；指令执行时，8086cpu自动取ds中的数据为内存单元的段地址
5.mov的三种用法：
  mov bx，1000H      将数据1000H送入寄存器bx中
  mov ds，bx            将寄存器bx中de数据送入寄存器ds中
  mov al，[0]             将内存单元地址送入寄存器al中；[0]为内存单元的偏移地址
  上面三条指令可以读取10000H单元的内容到寄存器al中。
  若需要将寄存器al中的数据送入内存单元10000H，只需要将第三条指令改为 mov [0]，al 就行
6.命令用法
mov：
  mov 寄存器，数据
  mov 寄存器，寄存器
  mov 寄存器，内存单元
  mov 内存单元，寄存器
  mov 段寄存器，寄存器
  mov 寄存器，段寄存器
add:
  add 寄存器，数据
  add 寄存器，寄存器
  add 寄存器，内存单元
  add 内存单元，寄存器
sub:
  sub 寄存器，数据
  sub 寄存器，寄存器
  sub 寄存器，内存单元
  sub 内存单元，寄存器
注意：add和sub不能对段寄存器进行操作
7.栈：栈操作都是以字为单位
SS 段寄存器，栈顶的段地址存放在SS中
SP 栈顶的偏移地址存放在SP中
任意时刻，SS:SP指向栈顶元素
  push 寄存器
  pop 寄存器
  push 段寄存器
  pop 段寄存器
  push 内存单元
  pop内存单元
8.一个栈段的最大容量为64KB。因为push、pop等在执行指令时只修改了sp，所以栈顶的变化范围是0-FFFFH，从栈空时候的sp=0，一直压栈，知道栈满时sp=0；如果再次压栈，栈顶将环绕，覆盖原来栈中的内容。
9.对于数据段，将它的段地址放在DS中，用mov、add、sub等访问内存单元的指令时，cpu就将我们定义的数据段中的内容当做数据来访问；
对于代码段，将它的段地址放在CS中，将段中第一条指定的偏移地址放在IP中，这样cpu就将执行我们定义的代码段中的指令；
对于栈段，将它的段地址放在SS中，将段栈顶单元的偏移地址放在SP中，这样CPU在需要进行栈操作时就将之当作栈空间来使用。




