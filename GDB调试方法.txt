1.确认系统是否安装了GDB：gbd -v
-------------------------------------------------------------------------
2.利用gdb调试的前期准备
2.1 用gcc编译
命令：gcc main.c -o mian.exe -g
注意：单纯用gcc编译出的可执行文件main.exe不能用gdb进行调试，必须加上-g，才能使用gbd调试程序
2.2 启动gdb
命令：gdb main.exe -silent   //-silent 是为了屏蔽掉部分免责信息
-------------------------------------------------------------------------
3.gdb常用调试指令
(gdb) break ***   
(gdb) b ***                 //设置断点，***为断点的具体位置；上同
(gdb) run
(gdb) r                       //执行被调试的程序，其会自动在第一个断点处暂停执行
(gdb) continue
(gdb) c                       //程序在某断点处停止运行后，使用该指令可以继续执行，直至遇到下个断点或程序结束
(gdb)  next
(gdb)  n                     //逐行执行
(gdb) print ***
(gdb) p ***                 //打印指定变量的值，其中***指的某一变量名
(gdb) list
(gdb) l                       //显示源程序代码的内容，包括各行代码所在的行号
(gdb) quit
(gdb) q                      //终止调试
----------------------------------------------------------------------------
4.调用gdb的方式（四种）
4.1 直接使用gdb指令启动GDB调试器
4.2 调试尚未执行的程序
指令：gdb 文件名
4.3 调试正在执行的程序(main.exe假定为被调试文件)
（1）获取正在执行程序的进程号：pidof mian.exe  //假定进程号为1830
（2）调用指令，有三种:PID为进程号
1）gdb attach PID
2）gdb mian.exe PID
3）gdb -p PID
注意：当GDB调试器成功连接到指定进程上时，程序执行会暂停。
4.4 调试执行异常崩溃的程序
须知：在linux操作系统中，当程序执行发生异常崩溃时，系统可以将发生崩溃时的北村数据、调用堆栈情况等信息自动记录下载，并存储到一个文件中，该文件通常称为core文件，linux系统所具备的这种功能又称为【核心转储】（core dump）。GDB对core文件的分析和调试提供功能支持，在程序崩溃时，通过GDB调试产生的core文件，往往可以更快速的解决问题。
core 文件的生成位置一般同该程序所在的目录相同，也可以指定位置
ps：默认情况下，linux不开启core dump功能
开启core dump：
1）ulimit -a   //查看系统是否开启此功能；若core file size 后为0，则没开启
2）ulimit -c unlimited
     ulimit -a   //core file size 后为unlimited，搞定！
【下面是对core文件的调试】(main.exe是假定的被调试程序)
指令：gdb main.exe core
对于core文件中记录的崩溃信息，可以使用where、print、bt等指令查看。
---------------------------------------------------------------------------------
5.对正在执行的程序，调试完成后，需手动将GDB调试器与程序分离，分离过程分2步：
1）执行detach指令，使GDB调试器和程序分离
2）执行quit（或q）指令，退出GDB调试
---------------------------------------------------------------------------------
6.GDB调试器启动可用参数
-pid 1830
-p 1830                     //调试进程号为1830的程序
-symbols file
-s file                        //仅从指定file文件中读取符号表
-q
-quiet
-silent                       //取消启动GDB调试器时打印的版本信息等
-cd directory             //以directory作为启动GDB调试器的工作目录，而非当前所在目录
--args 参数1 参数2  ... //向可执行文件传递执行所需要的参数
---------------------------------------------------------------------------------
7.启动GDB
1）gdb -q
2）（gdb）l               //验证其是否已找到指定的目标程序文件
3）（gdb）

























